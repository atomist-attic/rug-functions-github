"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Parameters_1 = require("./Parameters");
var Metadata_1 = require("../support/Metadata");
var GeneratorParameters = (function (_super) {
    __extends(GeneratorParameters, _super);
    function GeneratorParameters() {
        _super.apply(this, arguments);
    }
    __decorate([
        Metadata_1.parameter({ description: "Name of the new project",
            displayName: "Java Package",
            pattern: ".*",
            maxLength: 21 }), 
        __metadata('design:type', String)
    ], GeneratorParameters.prototype, "project_name", void 0);
    return GeneratorParameters;
}(Parameters_1.ParametersSupport));
exports.GeneratorParameters = GeneratorParameters;
/**
 * The commonest case. We want to customize a new project
 */
var CustomizingProjectGenerator = (function () {
    function CustomizingProjectGenerator() {
    }
    CustomizingProjectGenerator.prototype.populate = function (emptyProject, parameters) {
        emptyProject.copyEditorBackingFilesPreservingPath("");
        //this.customize(emptyProject, parameters)
    };
    return CustomizingProjectGenerator;
}());
exports.CustomizingProjectGenerator = CustomizingProjectGenerator;
