/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {TreeNode,FormatInfo,PathExpressionEngine} from '../tree/PathExpression'
import {ProjectContext} from '../operations/ProjectEditor'
import {MutableView} from "./MutableView"
import {File} from "./File"
export {Line}

/*
 * Represents a line within a text file
 */
interface Line extends MutableView {

    /**
      * Children
      *
      * @returns {any[]}
      */
    children(): any[]

    /**
      * Return this line's content
      *
      * @returns {string}
      */
    content(): string

    /**
      * Cause the operation to fail with a fatal error
      *
      * @param msg {string} The message to be displayed
      */
    fail(msg: string): void

    /**
      * Containing file
      *
      * @returns {File}
      */
    file(): File

    /**
      * Line length
      *
      * @returns {number}
      */
    length(): number

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeTags(): string[]

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeType(): string[]

    /**
      * Line number from 0
      *
      * @returns {number}
      */
    num(): number

    /**
      * Line number from 1
      *
      * @returns {number}
      */
    numFrom1(): number

    /**
      * Cause the editor to print to the console. Useful for debugging if running editors locally.
      *
      * @param msg {string} The message to be displayed
      */
    println(msg: string): void

    /**
      * Update this line's content
      *
      * @param s2 {string} The content to update this line to
      */
    update(s2: string): void

    /**
      * Return this line's content
      *
      * @returns {string}
      */
    value(): string

    /**
      * Node content
      *
      * @returns {string}
      */
    value(): string

}   

