/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {TreeNode,FormatInfo,PathExpressionEngine} from '../tree/PathExpression'
import {ProjectContext} from '../operations/ProjectEditor'
import {MutableView} from "./MutableView"
import {JavaClassOrInterface} from "./JavaClassOrInterface"
export {JavaField}

/*
 * Java field
 */
interface JavaField extends MutableView {

    /**
      * Annotate the element with the given annotation
      *
      * @param pkg {string} Package where the annotation is sourced
      * @param annotation {string} The annotation to add
      */
    addAnnotation(pkg: string, annotation: string): void

    /**
      * Add an import to the containing Java source
      *
      * @param fqn {string} The fully qualified name of the import
      */
    addImport(fqn: string): void

    /**
      * Children
      *
      * @returns {any[]}
      */
    children(): any[]

    /**
      * Cause the operation to fail with a fatal error
      *
      * @param msg {string} The message to be displayed
      */
    fail(msg: string): void

    /**
      * Does the element have the given annotation?
      *
      * @param annotation {string} The string name of the annotation to look for
      * @returns {boolean}
      */
    hasAnnotation(annotation: string): boolean

    /**
      * Line count
      *
      * @returns {number}
      */
    lineCount(): number

    /**
      * Return the name of the field
      *
      * @returns {string}
      */
    name(): string

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeTags(): string[]

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeType(): string[]

    /**
      * Cause the editor to print to the console. Useful for debugging if running editors locally.
      *
      * @param msg {string} The message to be displayed
      */
    println(msg: string): void

    /**
      * Remove annotation from the element
      *
      * @param pkg {string} Package where the annotation is sourced
      * @param annotation {string} The annotation to remove
      */
    removeAnnotation(pkg: string, annotation: string): void

    /**
      * Remove an import from the containing Java source
      *
      * @param fqn {string} The fully qualified name of the import
      */
    removeImport(fqn: string): void

    /**
      * Type this is on
      *
      * @returns {JavaClassOrInterface}
      */
    type(): JavaClassOrInterface

    /**
      * Node content
      *
      * @returns {string}
      */
    value(): string

}   

